{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to \u03a04U\n\n\n\u03a04U is a high performance framework for Bayesian uncertainty quantification of large scale computational models.\nThe software can be used for the following:\n\n\n\n\n\np(\\vartheta | d) = \\frac{p(d | \\vartheta) p(\\vartheta)}{p(d)}\n\n\n\n\np(\\vartheta | d) = \\frac{p(d | \\vartheta) p(\\vartheta)}{p(d)}\n\n\n\n\n\nwhere \np(d | \\vartheta)\np(d | \\vartheta)\n is the likelihood function",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-4u",
            "text": "\u03a04U is a high performance framework for Bayesian uncertainty quantification of large scale computational models.\nThe software can be used for the following:   \np(\\vartheta | d) = \\frac{p(d | \\vartheta) p(\\vartheta)}{p(d)}  \np(\\vartheta | d) = \\frac{p(d | \\vartheta) p(\\vartheta)}{p(d)}   where  p(d | \\vartheta) p(d | \\vartheta)  is the likelihood function",
            "title": "Welcome to \u03a04U"
        },
        {
            "location": "/installation/",
            "text": "SOFTWARE COMPONENTS\n\n\nYou will find the following software packages:\n\n\n\n\ntorc_lite: a tasking library that allows us to write platform-independent code\n\n\npndl: parallel numerical differentiation library, built on top of torc_lite\n\n\nengines: the UQ framework built on top of torc_lite. \n\n\n\n\nPREREQUISITES\n\n\n\n\nAn MPI implementation must be installed on your system (preferably with full thread safety)\n\n\nGSL (http://www.gnu.org/software/gsl/) is required by some engines and must be installed on your system\n\n\n\n\nINSTALLATION STEPS\n\n\n1) First we start with torc_lite. We assume that the MPI compiler is named mpicc.\n    cd torc_lite\n    ./configure CC=mpicc --prefix=\nHOME/usr/torc\n    make; make install\n    export PATH=\nHOME/usr/torc\n    make; make install\n    export PATH=\nHOME/usr/torc/bin:$PATH\n\n\nIf configure reports missing files, you will need to execute the autoreconf command (autoreconf) before executing ./configure \n\n\nIn $HOME/usr/torc/bin there are two files (torc_cflags, torc_libs) that facilitate the development of torc-based programs.\n   That's why we have added this directory to the PATH environment variable using the export (bash) command. \n\n\nAfter finishing this step, you must be able to run successfully at least one of the demo examples, available in torc/examples\n\n\n2) We then proceed with the compilation of the various engines (algorithms) of our Uncertainty Quantification and Optimization framework.\n   For example, to build the code that implements the TMCMC algorithm:\n\n\ncd inference/TMCMC\nmake\n\n\n\nIf there are compilation issues then some directories in Makefile might need to be revised.\n   For example, the exact location of the GSL library must be specificed.\n   Moreover on some platforms, the MPI compiler can be named differently (e.g. CC=cc on Piz Daint).\n\n\nThe following compilation options are supported:\n    - make use_omp=1        # builds the OpenMP version\n    - make use_torc=1       # builds the TORC-based version \n    - make use_omp=0 use_torc=0 # builds the serial version\n    - make              # default option is use_omp=1\n\n\nTESTING\n\n\n1) inference/TMCMC\n\n\nThe TMCMC sampling algorithm\n\n\na) build engine_tmcmc\n\n\ncd inference/TMCMC\nmake\n\n\n\nb) Run the engine\n    ./engine_tmcmc\n\n\nBy default, this runs TMCMC for the rosenbrock function in 2D, as defined in fitfun.c \n   This is expected to run and produce some output files (curgen_db_000.txt, curgen_db_001.txt, ...)\n\n\nThe output files can be visualized with the display_gen tool, available in the display directory, using the following command:\n    ./display_gen curgen_db 5 2\n    5: number of the last generation (curgen_db_000.txt to curgen_db_005.txt will be displayed)\n    2: problem dimension\n\n\nThe runtime options for this engine can be set in the configuration file tmcmc.par\n\n\n\n2) singleopt/CMAES\n\n\nThe CMAES stochastic optimization algorithm\n\n\na) Build the engine_cmaes\n\n\ncd singleopt/CMAES\nmake\n\n\n\nb) Run the engine\n    ./engine_cmaes\n\n\nOptimization of the rosenbrock function in 2D.\n   More information about the generated output files can be found in the documentation of CMAES.\n\n\n3) rare/subset\n\n\nSubset simulation \n\n\na) Build the two engines\n\n\ncd rare/subset\nmake\n\n\n\nb) Run engine_ss1\n    ./engine_ss1\n\n\nSubset simulation for predefined levels\n   This is expected to run and produce some output files (samples_000.txt etc)\n\n\nThe output files can be displayed with the display_gen tool, using the following command:\n    ./display_gen samples 8 2\n    8: number of the last generation (samples_000.txt to samples_008.txt will be displayed)\n    2: problem dimension\n\n\nThe runtime options for this engine can be set in the configuration file subset.par\n\n\nc) Run engine_ss2\n\n\n./engine_ss2\n\n\n\nSame as before but for subset simulation with adaptive levels\n\n\n4) Numerical differentiation\n\n\na) Build the parallel numerical differentiation library (PNDL).\n\n\ncd derivatives/pndl\n./configure CC=mpicc F90=mpif90 \nmake\n\n\n\nA README file with more detailed instructions is available along with the source code of PNDL. \n\n\nb) Build the tools \n\n\ncd derivatives/tools\nmake\n\n\n\nc) Run the tools\n\n\n./fd_grad\n./fd_deriv\n./sa_deriv\n\n\n\nfd_grad: Calculation of the most suitable differentiation step per dimension using gradients and Romberg extrapolation \n\n   fd_deriv: Calculation of the gradient vector and Hessian matrix using PNDL \n   sa_deriv: Stochastic approximation of the Hessian matrix (experimental code)\n\n\nConfiguration file for all tools: grad.par\n\n\n5) inference/abc-subsim\n\n\nABC-SUBSIM\n\n\nPlease check the README-ABC.txt file in the corresponding folder\n\n\nVISUALIZATION\n\n\nThe display_gen tool, available in the display directority,  can visualize 2D slices of multidimensional data using gnuplot. \n\n\nTo build it:\n    cd display\n    make\n\n\nThe syntax can invoked as follows:\n    ./display_gen \n \n \n [var1] [var2]\n\n\n- The full name of the file is in the form: <datafile>_<gen>.txt, where gen = 000, 001, ..., <last gen>\n- <dimension> is the number of parameters. This means that the datafile has <dimension>+1 columns, the last containing the result of the function evaluation\n- [var1] and [var2] are optional arguments that specify the indices of the two parameters that will be displayed\n\nExample:\n./display_gen ../inference/TMCMC/curgen_db 4 2 1 2\n\n\n\nCOUPLING WITH EXTERNAL SOFTWARE\n\n\nThe coupling/ folder includes examples that demonstrate how external software can be called within a fitness function (fitfun)\n   and coupled with any of the engines and tools available in the Pi4U framework.\n   External software can include any kind of sequential or parallel code (OpenMP, MPI), \n   and be implemented in any possible programming language and environment (C/C++, Fortran, Python, Matlab). \n\n\nCurrently the following examples are included:\n\n\na) coupling/rosenbrock:\n    A simple example; the Rosenbrock function now runs within the external sequential software.\n    Passing of parameters is performed through the automatically created params.dat file\n\n\nNOTES\n\n\nDo not hesitate to ask for help and report any problems at:\n- chatzidp AT ethz.ch\n- garampat AT ethz.ch",
            "title": "Installation"
        },
        {
            "location": "/installation/#software-components",
            "text": "You will find the following software packages:   torc_lite: a tasking library that allows us to write platform-independent code  pndl: parallel numerical differentiation library, built on top of torc_lite  engines: the UQ framework built on top of torc_lite.",
            "title": "SOFTWARE COMPONENTS"
        },
        {
            "location": "/installation/#prerequisites",
            "text": "An MPI implementation must be installed on your system (preferably with full thread safety)  GSL (http://www.gnu.org/software/gsl/) is required by some engines and must be installed on your system",
            "title": "PREREQUISITES"
        },
        {
            "location": "/installation/#installation-steps",
            "text": "1) First we start with torc_lite. We assume that the MPI compiler is named mpicc.\n    cd torc_lite\n    ./configure CC=mpicc --prefix= HOME/usr/torc\n    make; make install\n    export PATH= HOME/usr/torc\n    make; make install\n    export PATH= HOME/usr/torc/bin:$PATH  If configure reports missing files, you will need to execute the autoreconf command (autoreconf) before executing ./configure   In $HOME/usr/torc/bin there are two files (torc_cflags, torc_libs) that facilitate the development of torc-based programs.\n   That's why we have added this directory to the PATH environment variable using the export (bash) command.   After finishing this step, you must be able to run successfully at least one of the demo examples, available in torc/examples  2) We then proceed with the compilation of the various engines (algorithms) of our Uncertainty Quantification and Optimization framework.\n   For example, to build the code that implements the TMCMC algorithm:  cd inference/TMCMC\nmake  If there are compilation issues then some directories in Makefile might need to be revised.\n   For example, the exact location of the GSL library must be specificed.\n   Moreover on some platforms, the MPI compiler can be named differently (e.g. CC=cc on Piz Daint).  The following compilation options are supported:\n    - make use_omp=1        # builds the OpenMP version\n    - make use_torc=1       # builds the TORC-based version \n    - make use_omp=0 use_torc=0 # builds the serial version\n    - make              # default option is use_omp=1",
            "title": "INSTALLATION STEPS"
        },
        {
            "location": "/installation/#testing",
            "text": "1) inference/TMCMC  The TMCMC sampling algorithm  a) build engine_tmcmc  cd inference/TMCMC\nmake  b) Run the engine\n    ./engine_tmcmc  By default, this runs TMCMC for the rosenbrock function in 2D, as defined in fitfun.c \n   This is expected to run and produce some output files (curgen_db_000.txt, curgen_db_001.txt, ...)  The output files can be visualized with the display_gen tool, available in the display directory, using the following command:\n    ./display_gen curgen_db 5 2\n    5: number of the last generation (curgen_db_000.txt to curgen_db_005.txt will be displayed)\n    2: problem dimension  The runtime options for this engine can be set in the configuration file tmcmc.par  2) singleopt/CMAES  The CMAES stochastic optimization algorithm  a) Build the engine_cmaes  cd singleopt/CMAES\nmake  b) Run the engine\n    ./engine_cmaes  Optimization of the rosenbrock function in 2D.\n   More information about the generated output files can be found in the documentation of CMAES.  3) rare/subset  Subset simulation   a) Build the two engines  cd rare/subset\nmake  b) Run engine_ss1\n    ./engine_ss1  Subset simulation for predefined levels\n   This is expected to run and produce some output files (samples_000.txt etc)  The output files can be displayed with the display_gen tool, using the following command:\n    ./display_gen samples 8 2\n    8: number of the last generation (samples_000.txt to samples_008.txt will be displayed)\n    2: problem dimension  The runtime options for this engine can be set in the configuration file subset.par  c) Run engine_ss2  ./engine_ss2  Same as before but for subset simulation with adaptive levels  4) Numerical differentiation  a) Build the parallel numerical differentiation library (PNDL).  cd derivatives/pndl\n./configure CC=mpicc F90=mpif90 \nmake  A README file with more detailed instructions is available along with the source code of PNDL.   b) Build the tools   cd derivatives/tools\nmake  c) Run the tools  ./fd_grad\n./fd_deriv\n./sa_deriv  fd_grad: Calculation of the most suitable differentiation step per dimension using gradients and Romberg extrapolation  \n   fd_deriv: Calculation of the gradient vector and Hessian matrix using PNDL \n   sa_deriv: Stochastic approximation of the Hessian matrix (experimental code)  Configuration file for all tools: grad.par  5) inference/abc-subsim  ABC-SUBSIM  Please check the README-ABC.txt file in the corresponding folder",
            "title": "TESTING"
        },
        {
            "location": "/installation/#visualization",
            "text": "The display_gen tool, available in the display directority,  can visualize 2D slices of multidimensional data using gnuplot.   To build it:\n    cd display\n    make  The syntax can invoked as follows:\n    ./display_gen       [var1] [var2]  - The full name of the file is in the form: <datafile>_<gen>.txt, where gen = 000, 001, ..., <last gen>\n- <dimension> is the number of parameters. This means that the datafile has <dimension>+1 columns, the last containing the result of the function evaluation\n- [var1] and [var2] are optional arguments that specify the indices of the two parameters that will be displayed\n\nExample:\n./display_gen ../inference/TMCMC/curgen_db 4 2 1 2",
            "title": "VISUALIZATION"
        },
        {
            "location": "/installation/#coupling-with-external-software",
            "text": "The coupling/ folder includes examples that demonstrate how external software can be called within a fitness function (fitfun)\n   and coupled with any of the engines and tools available in the Pi4U framework.\n   External software can include any kind of sequential or parallel code (OpenMP, MPI), \n   and be implemented in any possible programming language and environment (C/C++, Fortran, Python, Matlab).   Currently the following examples are included:  a) coupling/rosenbrock:\n    A simple example; the Rosenbrock function now runs within the external sequential software.\n    Passing of parameters is performed through the automatically created params.dat file",
            "title": "COUPLING WITH EXTERNAL SOFTWARE"
        },
        {
            "location": "/installation/#notes",
            "text": "Do not hesitate to ask for help and report any problems at:\n- chatzidp AT ethz.ch\n- garampat AT ethz.ch",
            "title": "NOTES"
        },
        {
            "location": "/examples/sampling/",
            "text": "Sampling the posterior distribution\n\n\nIn this example we will show how to sample the posterior distribution in an uncertainty quantification problem. First, we will create synthetic data using the model,\n$$\nf(t;\\vartheta) = \n$$",
            "title": "Sampling"
        },
        {
            "location": "/examples/sampling/#sampling-the-posterior-distribution",
            "text": "In this example we will show how to sample the posterior distribution in an uncertainty quantification problem. First, we will create synthetic data using the model,\n$$\nf(t;\\vartheta) = \n$$",
            "title": "Sampling the posterior distribution"
        },
        {
            "location": "/examples/post/",
            "text": "Bayesian UQ plots\n\n\n\n\nmaltab  \n\n\npython  \n\n\n\n\nOptimization plots\n\n\n\n\nmaltab  \n\n\npython",
            "title": "Postprocessing"
        },
        {
            "location": "/examples/post/#bayesian-uq-plots",
            "text": "maltab    python",
            "title": "Bayesian UQ plots"
        },
        {
            "location": "/examples/post/#optimization-plots",
            "text": "maltab    python",
            "title": "Optimization plots"
        },
        {
            "location": "/developing/",
            "text": "Repository Structure\n\n\nTODO\n\n\nConventions\n\n\nTODO\n\n\nWrite your own likelihood\n\n\nTODO\n\n\nUpcoming\n\n\n\n\nABC-SubSim (xx/xx/2018)  \n\n\nAMaLGaM (xx/xx/2018)  \n\n\nMulti-objective optimization (xx/xx/2018)  \n\n\nManifold TMCMC (xx/xx/2018)  \n\n\n\n\nBeta\n\n\n\n\npython interface\n\n\nmatlab interface",
            "title": "Developing"
        },
        {
            "location": "/developing/#repository-structure",
            "text": "TODO",
            "title": "Repository Structure"
        },
        {
            "location": "/developing/#conventions",
            "text": "TODO",
            "title": "Conventions"
        },
        {
            "location": "/developing/#write-your-own-likelihood",
            "text": "TODO",
            "title": "Write your own likelihood"
        },
        {
            "location": "/developing/#upcoming",
            "text": "ABC-SubSim (xx/xx/2018)    AMaLGaM (xx/xx/2018)    Multi-objective optimization (xx/xx/2018)    Manifold TMCMC (xx/xx/2018)",
            "title": "Upcoming"
        },
        {
            "location": "/developing/#beta",
            "text": "python interface  matlab interface",
            "title": "Beta"
        },
        {
            "location": "/hpc/",
            "text": "TODO",
            "title": "Performance and Scalability"
        },
        {
            "location": "/references/",
            "text": "Related publications\n\n\nPi4U framework\n\n\n\n\nHadjidoukas P.E., Angelikopoulos P., Papadimitriou C., Koumoutsakos P., Pi4U: A high performance computing framework for Bayesian uncertainty quantification of complex models. J. Comput. Phys., 284:1-21, 2015\n(\ndoi\n,\npdf\n)\n\n\nHadjidoukas P.E., Angelikopoulos P., Kulakova L., Papadimitriou C., Koumoutsakos P., Exploiting Task-Based Parallelism in Bayesian Uncertainty Quantification. EuroPar 2015, LLCS 2015, 9233, 532\n(\ndoi\n,\npdf\n)\n\n\n\n\nApplications\n\n\n\n\n\n\nKulakova L., Angelikopoulos P., Hadjidoukas P. E., Papadimitriou C., Koumoutsakos P., Approximate Bayesian Computation for Granular and Molecular Dynamics Simulations. Proceedings of the Platform for Advanced Scientific Computing Conference PASC'16, 2016\n(\ndoi\n, \npdf\n)\n\n\n\n\n\n\nHadjidoukas P.E, Angelikopoulos P., Rossinelli D., Alexeev D., Papadimitriou C., Koumoutsakos P., Bayesian uncertainty quantification and propagation for discrete element simulations of granular materials. Comput. Methods Appl. Mech. Engrg., 282:218-238, 2014\n(\ndoi\n,\npdf\n)\n\n\n\n\n\n\nTORC: Task-Based Runtime Library\n\n\n\n\nHadjidoukas P.E., Lappas E., Dimakopoulos V.V: A Runtime Library for Platform-Independent Task Parallelism. PDP 2012: 229-236\n(\ndoi\n)",
            "title": "References"
        },
        {
            "location": "/references/#related-publications",
            "text": "",
            "title": "Related publications"
        },
        {
            "location": "/references/#pi4u-framework",
            "text": "Hadjidoukas P.E., Angelikopoulos P., Papadimitriou C., Koumoutsakos P., Pi4U: A high performance computing framework for Bayesian uncertainty quantification of complex models. J. Comput. Phys., 284:1-21, 2015\n( doi , pdf )  Hadjidoukas P.E., Angelikopoulos P., Kulakova L., Papadimitriou C., Koumoutsakos P., Exploiting Task-Based Parallelism in Bayesian Uncertainty Quantification. EuroPar 2015, LLCS 2015, 9233, 532\n( doi , pdf )",
            "title": "Pi4U framework"
        },
        {
            "location": "/references/#applications",
            "text": "Kulakova L., Angelikopoulos P., Hadjidoukas P. E., Papadimitriou C., Koumoutsakos P., Approximate Bayesian Computation for Granular and Molecular Dynamics Simulations. Proceedings of the Platform for Advanced Scientific Computing Conference PASC'16, 2016\n( doi ,  pdf )    Hadjidoukas P.E, Angelikopoulos P., Rossinelli D., Alexeev D., Papadimitriou C., Koumoutsakos P., Bayesian uncertainty quantification and propagation for discrete element simulations of granular materials. Comput. Methods Appl. Mech. Engrg., 282:218-238, 2014\n( doi , pdf )",
            "title": "Applications"
        },
        {
            "location": "/references/#torc-task-based-runtime-library",
            "text": "Hadjidoukas P.E., Lappas E., Dimakopoulos V.V: A Runtime Library for Platform-Independent Task Parallelism. PDP 2012: 229-236\n( doi )",
            "title": "TORC: Task-Based Runtime Library"
        }
    ]
}