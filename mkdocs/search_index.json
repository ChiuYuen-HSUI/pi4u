{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Pi4U\n\n\nPi4U is a HPC framework for Bayesian uncertainty quantification of large scale computational models.\n\n\nModules and algorithms\n\n\nSampling\n\n\nTMCMC\n\n\nABC-Subsim\n\n\nSingle-objective optimization\n\n\nCMAES\n\n\nAmalgam\n\n\nMulti-objective optimization\n\n\nNSGA-II\n\n\nMOCMAES\n\n\nMOEAD\n\n\nImplementations\n\n\nParallel\n\n\nSequential", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pi4u", 
            "text": "Pi4U is a HPC framework for Bayesian uncertainty quantification of large scale computational models.", 
            "title": "Welcome to Pi4U"
        }, 
        {
            "location": "/#modules-and-algorithms", 
            "text": "", 
            "title": "Modules and algorithms"
        }, 
        {
            "location": "/#sampling", 
            "text": "TMCMC  ABC-Subsim", 
            "title": "Sampling"
        }, 
        {
            "location": "/#single-objective-optimization", 
            "text": "CMAES  Amalgam", 
            "title": "Single-objective optimization"
        }, 
        {
            "location": "/#multi-objective-optimization", 
            "text": "NSGA-II  MOCMAES  MOEAD", 
            "title": "Multi-objective optimization"
        }, 
        {
            "location": "/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/#parallel", 
            "text": "", 
            "title": "Parallel"
        }, 
        {
            "location": "/#sequential", 
            "text": "", 
            "title": "Sequential"
        }, 
        {
            "location": "/python/", 
            "text": "Python interface of TMCMC\n\n\nModule tmcmc implements the TMCMC (Transitional Markov-Chain Monte Carlo) algorithm.\n\n\nWe use the C implementation of the algorithm and the ctypes wrapper module for calling it from Python.\nSince the function we are sampling from is also written in Python, we use embedded Python to call the\nfunction from the C code and \nnumpy\n to pass arguments between the two environments.\n\n\nTMCMC\n\n\nThe Python interface of TMCMC is defined as follows:\n\n\ndef tmcmc(fitfun, dim=2, maxstages=20, popsize=1024, lowerbound=[-6,-6], upperbound=[6,6], id=0):\n\n\nInputs:\n\n\n\n\nfitfun\n: python script name (without the .py extension) that implements the log-likelihood function.\nThe prototype is: fitfun(x, dim), where \nx\n is a vector of parameter values and \ndim\n the number of parameters.\n\n\ndim\n: number of parameters\n\n\nmaxstages\n: maximum number of stages that can be performed by the TMCMC algorithm\n\n\npopsize\n: number of samples per stage\n\n\nlowerbound\n: lower bound for each parameter\n\n\nupperbound\n: uppoer bound for each parameter\n\n\nid\n: integer identifier for the specific tmcmc() call. The value is appended to the output files generated by the algorithm.\n\n\n\n\nOutputs:\n\n\nThe tmcmc function returns the log-evidence of the model.\nIn addition, for each stage of the algorithm, the evaluation points and their log-likelihood are stored in text files\nnamed as curgen_db_xxx_yyy.txt, where xxx: id of the tmcmc() call, and yyy: stage of the algorithm.\n\n\nFitness function\n\n\nThe fitness function typically computes the model output and returns the log-likelihood of the data\n\n\ndef fitfun(x, dim):\n\n\n\n\nx\n: the parameters (theta) of the model\n\n\ndim\n: the number of parameters\n\n\n\n\nPlotting\n\n\n2D scatter plots of the samples stored in the output text files, colored according to the log-likelihood values,\ncan be produced using the  of the plot_gen() function.\n\n\ndef plot_gen(filename, dim=2, i=1, j=2, show=1, save=0):\n\n\n\n\nfilename\n: curgen_db_xxx_yyy.txt file\n\n\ndim\n: number of parameters\n\n\ni\n: first parameter\n\n\nj\n: second parameter\n\n\nshow\n: depict the plot on the screen\n\n\nsave\n: save the plot in a png file (filename.png)\n\n\n\n\nExample\n\n\ndemo.py\n\n\n# Import whatever is necessary\nimport sys\nsys.path.append(\"../lib_python\")\nfrom tmcmc import *\n\nlogEv=tmcmc(\"fitfun2\",dim=2,maxstages=20,popsize=4096,lowerbound=[-10,-10],upperbound=[10,10],id=2)\nprint(\"logEv=\",logEv[0])\n\nfrom plot_gen import *\nplot_gen('curgen_db_002_003.txt', dim=2, i=1, j=2, show=1, save=1)\n\n\n\nfitfun2.py\n\n\n# two multivariate gaussians\nfrom scipy.stats import multivariate_normal as mvnorm\nimport math\n\ndef fitfun2(x, dim):\n\n    mean1 = [-5, -5]\n    cov1 = [[1, 0], [0, 1]]  # diagonal covariance\n\n    mean2 = [5, 5]\n    cov2 = [[1, 0], [0, 1]]  # diagonal covariance\n\n    s = mvnorm.pdf(x, mean1, cov1) + mvnorm.pdf(x, mean2, cov2)\n    s = math.log(s)\n\n    return s\n\n\n\nInstallation and testing\n\n\nPrerequisites\n\n\n\n\nC compiler\n\n\nPython\n\n\nNumpy\n\n\nGNU GSL library\n\n\n\n\nSteps\n\n\n\n\n\n\nDownload from github:\n\n\ngit clone https://github.com/cselab/pi4u.git -b tmcmc\n\n\n\n\n\n\n\nGo to pi4u/src and build the library:\n\n\ncd pi4u/src; make\n\n\n\n\n\n\n\nGo to demo_python and run demo.py\n\n\ncd demo; python2.7 demo.py", 
            "title": "Python"
        }, 
        {
            "location": "/python/#python-interface-of-tmcmc", 
            "text": "Module tmcmc implements the TMCMC (Transitional Markov-Chain Monte Carlo) algorithm.  We use the C implementation of the algorithm and the ctypes wrapper module for calling it from Python.\nSince the function we are sampling from is also written in Python, we use embedded Python to call the\nfunction from the C code and  numpy  to pass arguments between the two environments.", 
            "title": "Python interface of TMCMC"
        }, 
        {
            "location": "/python/#tmcmc", 
            "text": "The Python interface of TMCMC is defined as follows:  def tmcmc(fitfun, dim=2, maxstages=20, popsize=1024, lowerbound=[-6,-6], upperbound=[6,6], id=0):  Inputs:   fitfun : python script name (without the .py extension) that implements the log-likelihood function.\nThe prototype is: fitfun(x, dim), where  x  is a vector of parameter values and  dim  the number of parameters.  dim : number of parameters  maxstages : maximum number of stages that can be performed by the TMCMC algorithm  popsize : number of samples per stage  lowerbound : lower bound for each parameter  upperbound : uppoer bound for each parameter  id : integer identifier for the specific tmcmc() call. The value is appended to the output files generated by the algorithm.   Outputs:  The tmcmc function returns the log-evidence of the model.\nIn addition, for each stage of the algorithm, the evaluation points and their log-likelihood are stored in text files\nnamed as curgen_db_xxx_yyy.txt, where xxx: id of the tmcmc() call, and yyy: stage of the algorithm.", 
            "title": "TMCMC"
        }, 
        {
            "location": "/python/#fitness-function", 
            "text": "The fitness function typically computes the model output and returns the log-likelihood of the data  def fitfun(x, dim):   x : the parameters (theta) of the model  dim : the number of parameters", 
            "title": "Fitness function"
        }, 
        {
            "location": "/python/#plotting", 
            "text": "2D scatter plots of the samples stored in the output text files, colored according to the log-likelihood values,\ncan be produced using the  of the plot_gen() function.  def plot_gen(filename, dim=2, i=1, j=2, show=1, save=0):   filename : curgen_db_xxx_yyy.txt file  dim : number of parameters  i : first parameter  j : second parameter  show : depict the plot on the screen  save : save the plot in a png file (filename.png)", 
            "title": "Plotting"
        }, 
        {
            "location": "/python/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/python/#demopy", 
            "text": "# Import whatever is necessary\nimport sys\nsys.path.append(\"../lib_python\")\nfrom tmcmc import *\n\nlogEv=tmcmc(\"fitfun2\",dim=2,maxstages=20,popsize=4096,lowerbound=[-10,-10],upperbound=[10,10],id=2)\nprint(\"logEv=\",logEv[0])\n\nfrom plot_gen import *\nplot_gen('curgen_db_002_003.txt', dim=2, i=1, j=2, show=1, save=1)", 
            "title": "demo.py"
        }, 
        {
            "location": "/python/#fitfun2py", 
            "text": "# two multivariate gaussians\nfrom scipy.stats import multivariate_normal as mvnorm\nimport math\n\ndef fitfun2(x, dim):\n\n    mean1 = [-5, -5]\n    cov1 = [[1, 0], [0, 1]]  # diagonal covariance\n\n    mean2 = [5, 5]\n    cov2 = [[1, 0], [0, 1]]  # diagonal covariance\n\n    s = mvnorm.pdf(x, mean1, cov1) + mvnorm.pdf(x, mean2, cov2)\n    s = math.log(s)\n\n    return s", 
            "title": "fitfun2.py"
        }, 
        {
            "location": "/python/#installation-and-testing", 
            "text": "", 
            "title": "Installation and testing"
        }, 
        {
            "location": "/python/#prerequisites", 
            "text": "C compiler  Python  Numpy  GNU GSL library", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/python/#steps", 
            "text": "Download from github:  git clone https://github.com/cselab/pi4u.git -b tmcmc    Go to pi4u/src and build the library:  cd pi4u/src; make    Go to demo_python and run demo.py  cd demo; python2.7 demo.py", 
            "title": "Steps"
        }, 
        {
            "location": "/matlab/", 
            "text": "Matlab interface of TMCMC", 
            "title": "Matlab"
        }, 
        {
            "location": "/matlab/#matlab-interface-of-tmcmc", 
            "text": "", 
            "title": "Matlab interface of TMCMC"
        }, 
        {
            "location": "/rlib/", 
            "text": "R interface of TMCMC", 
            "title": "R"
        }, 
        {
            "location": "/rlib/#r-interface-of-tmcmc", 
            "text": "", 
            "title": "R interface of TMCMC"
        }, 
        {
            "location": "/hpc/", 
            "text": "Software layout\n\n\ntorc_lite    # TORC tasking library\npndl         # Parallel numerical differentation library\nengines/      # UQ + OPT algorithms\n    engine_tmcmc # TMCMC\n    engine_cmaes # CMAES\n    ...          #\nABC_SubSim   # ABC Subset simulation algorithm\nAMaLGaM      # Stochastic optimization algorithm", 
            "title": "C/C++"
        }, 
        {
            "location": "/hpc/#software-layout", 
            "text": "torc_lite    # TORC tasking library\npndl         # Parallel numerical differentation library\nengines/      # UQ + OPT algorithms\n    engine_tmcmc # TMCMC\n    engine_cmaes # CMAES\n    ...          #\nABC_SubSim   # ABC Subset simulation algorithm\nAMaLGaM      # Stochastic optimization algorithm", 
            "title": "Software layout"
        }, 
        {
            "location": "/about/", 
            "text": "Pi4U - High Performance UQ+OPT Framework\n\n\nPi4U  is our HPC framework for Bayesian uncertainty quantification of large scale computational models.\n\n\nSoftware\n\n\n\n\nThe latest version of the Pi4U framework can be downloaded from here:\n\npi4u_0.4.1.tar.gz\n (22.03.2016)\n\n\nPrevious public version: \npi4u_0.2.tar.gz\n\n\n\n\nAdditional documentation\n\n\n\n\nTutorial: \npdf\n\n\nPoster about Pi4U: \npdf\n\n\nPresentation at the Europar 2015 conference: \npdf\n\n\n\n\nRelated publications\n\n\nPi4U framework\n\n\n\n\nHadjidoukas P.E., Angelikopoulos P., Papadimitriou C., Koumoutsakos P., Pi4U: A high performance computing framework for Bayesian uncertainty quantification of complex models. J. Comput. Phys., 284:1-21, 2015\n(\ndoi\n,\npdf\n)\n\n\nHadjidoukas P.E., Angelikopoulos P., Kulakova L., Papadimitriou C., Koumoutsakos P., Exploiting Task-Based Parallelism in Bayesian Uncertainty Quantification. EuroPar 2015, LLCS 2015, 9233, 532\n(\ndoi\n,\npdf\n)\n\n\n\n\nApplications\n\n\n\n\n\n\nKulakova L., Angelikopoulos P., Hadjidoukas P. E., Papadimitriou C., Koumoutsakos P., Approximate Bayesian Computation for Granular and Molecular Dynamics Simulations. Proceedings of the Platform for Advanced Scientific Computing Conference PASC'16, 2016\n(\ndoi\n, \npdf\n)\n\n\n\n\n\n\nHadjidoukas P.E, Angelikopoulos P., Rossinelli D., Alexeev D., Papadimitriou C., Koumoutsakos P., Bayesian uncertainty quantification and propagation for discrete element simulations of granular materials. Comput. Methods Appl. Mech. Engrg., 282:218-238, 2014\n(\ndoi\n,\npdf\n)\n\n\n\n\n\n\nTORC: Task-Based Runtime Library\n\n\n\n\nHadjidoukas P.E., Lappas E., Dimakopoulos V.V: A Runtime Library for Platform-Independent Task Parallelism. PDP 2012: 229-236\n(\ndoi\n)", 
            "title": "About"
        }, 
        {
            "location": "/about/#pi4u-high-performance-uqopt-framework", 
            "text": "Pi4U  is our HPC framework for Bayesian uncertainty quantification of large scale computational models.", 
            "title": "Pi4U - High Performance UQ+OPT Framework"
        }, 
        {
            "location": "/about/#software", 
            "text": "The latest version of the Pi4U framework can be downloaded from here: pi4u_0.4.1.tar.gz  (22.03.2016)  Previous public version:  pi4u_0.2.tar.gz", 
            "title": "Software"
        }, 
        {
            "location": "/about/#additional-documentation", 
            "text": "Tutorial:  pdf  Poster about Pi4U:  pdf  Presentation at the Europar 2015 conference:  pdf", 
            "title": "Additional documentation"
        }, 
        {
            "location": "/about/#related-publications", 
            "text": "", 
            "title": "Related publications"
        }, 
        {
            "location": "/about/#pi4u-framework", 
            "text": "Hadjidoukas P.E., Angelikopoulos P., Papadimitriou C., Koumoutsakos P., Pi4U: A high performance computing framework for Bayesian uncertainty quantification of complex models. J. Comput. Phys., 284:1-21, 2015\n( doi , pdf )  Hadjidoukas P.E., Angelikopoulos P., Kulakova L., Papadimitriou C., Koumoutsakos P., Exploiting Task-Based Parallelism in Bayesian Uncertainty Quantification. EuroPar 2015, LLCS 2015, 9233, 532\n( doi , pdf )", 
            "title": "Pi4U framework"
        }, 
        {
            "location": "/about/#applications", 
            "text": "Kulakova L., Angelikopoulos P., Hadjidoukas P. E., Papadimitriou C., Koumoutsakos P., Approximate Bayesian Computation for Granular and Molecular Dynamics Simulations. Proceedings of the Platform for Advanced Scientific Computing Conference PASC'16, 2016\n( doi ,  pdf )    Hadjidoukas P.E, Angelikopoulos P., Rossinelli D., Alexeev D., Papadimitriou C., Koumoutsakos P., Bayesian uncertainty quantification and propagation for discrete element simulations of granular materials. Comput. Methods Appl. Mech. Engrg., 282:218-238, 2014\n( doi , pdf )", 
            "title": "Applications"
        }, 
        {
            "location": "/about/#torc-task-based-runtime-library", 
            "text": "Hadjidoukas P.E., Lappas E., Dimakopoulos V.V: A Runtime Library for Platform-Independent Task Parallelism. PDP 2012: 229-236\n( doi )", 
            "title": "TORC: Task-Based Runtime Library"
        }
    ]
}